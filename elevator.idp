// First name: Bo
// Last name: Kleynen
// Student number: r0624034


// FIXED VOCABULARY
// DO NOT CHANGE THIS VOCABULARY
LTCvocabulary V_fixed {
    type Time isa nat			// A set of time points
    Start: Time 				// The initial time point
    partial Next(Time): Time 	// The successor time point of time point t
    
    type Floor isa nat									// The set of floors
    type DoorState constructed from {Closed, Open}		// A set of possible states of the elevator’s doors
	
    // Fluents
    ElPosition(Time): Floor				// The floor of the elevator at time point t
    ElDoorState(Time): DoorState		// The state of the elevator’s doors at time point t
    UnansweredRequest(Time, Floor)		// Denotes that there is an unanswered request at floor f at time point t
    
    // Actions
    MakeRequest(Time, Floor) 			// Denotes that a request is made for floor f at time point t
}


// STUDENT VOCABULARY
// Here you can add new types, functions and predicates
LTCvocabulary V_student {
    extern vocabulary V_fixed
    
    type Direction constructed from {Up, Down}
    
    // Move(t) is true iff the elevator starts moving at time t.
    Move(Time)
    
    Direction(Time, Direction)
    
    // ChangeDoorState(t) is true iff the elevator changes the state of its doors at time t.
    ChangeDoorState(Time)
    
    I_ElPosition(Floor)
    C_ElPosition(Time, Floor)
    Cn_ElPosition(Time, Floor)
    
    I_ElDoorState(DoorState)
    C_ElDoorState(Time, DoorState)
    Cn_ElDoorState(Time, DoorState)
    
    I_UnansweredRequest(Floor)
    C_UnansweredRequest(Time, Floor)
    Cn_UnansweredRequest(Time, Floor)
    
    I_Direction(Direction)
    C_Direction(Time, Direction)
    Cn_Direction(Time, Direction)
}

// TIME THEORY
// DO NOT CHANGE THIS THEORY
Theory T_fixed : V_student {
    // Defining time
    {
        Start = MIN[:Time].
        ! t: Next(t) = t+1 <- Time(t+1).
    }
}


// STUDENT THEORY
// Here you should model the dynamic elevator system
Theory T_student: V_student {    
    ! f[Floor]: ~UnansweredRequest(MAX, f). 
    
    // In the first time step the elevator is at the bottom floor
    I_ElPosition(MIN).
    
    // In the first time step there can be no unanswered requests.
    ! f[Floor]: ~I_UnansweredRequest(f).
    
    // ElPosition inertia.
    {
        ! f[Floor]: ElPosition(Start) = f <- I_ElPosition(f).
        ! t[Time] f[Floor]: ElPosition(Next(t)) = f <- C_ElPosition(t, f).
        ! t[Time] f[Floor]: ElPosition(Next(t)) = f <- ElPosition(t) = f & ~Cn_ElPosition(t, f).
    }
    
    // Position causes
    {
        ! t[Time]: C_ElPosition(t, ElPosition(t)+1) <- Move(t) & Direction(t, Up).
        ! t[Time]: C_ElPosition(t, ElPosition(t)-1) <- Move(t) & Direction(t, Down).
        
        ! t[Time] dir[Direction]: Cn_ElPosition(t, ElPosition(t)) <- Move(t).
    }
    
    // UnansweredRequest inertia
    {
        ! f[Floor]: UnansweredRequest(Start, f) <- I_UnansweredRequest(f).
        ! t[Time] f[Floor]: UnansweredRequest(Next(t), f) <- C_UnansweredRequest(t, f).
        ! t[Time] f[Floor]: UnansweredRequest(Next(t), f) <- UnansweredRequest(t, f) & ~Cn_UnansweredRequest(t, f).
    }
    
    // UnansweredRequest causes
    {
        ! t[Time] f[Floor]: C_UnansweredRequest(t, f) <- MakeRequest(t, f) & ~UnansweredRequest(t, f).
        ! t[Time]: Cn_UnansweredRequest(t, ElPosition(t)) <- true.
    }
    
    // Direction inertia
    {
        ! dir[Direction]: Direction(Start, dir) <- I_Direction(dir).
        ! t[Time] dir[Direction]: Direction(Next(t), dir) <- C_Direction(t, dir).
        ! t[Time] dir[Direction]: Direction(Next(t), dir) <- Direction(t, dir) & ~Cn_Direction(t, dir).
    }
    
    // Direction causes
    {
        ! t[Time]: C_Direction(t, Up) <- ? f[Floor]: UnansweredRequest(t, f) & f >= ElPosition(t).
        ! t[Time]: C_Direction(t, Down) <- ? f[Floor]: UnansweredRequest(t, f) & f =< ElPosition(t).
        
        ! t[Time]: Cn_Direction(t, Up) <- ! f[Floor]: UnansweredRequest(t, f) => f < ElPosition(t).
        ! t[Time]: Cn_Direction(t, Down) <- ! f[Floor]: UnansweredRequest(t, f) => f > ElPosition(t).
    }
}


// MAIN PROCEDURE
// If you have to change the main procedure for debugging purposes, be careful and restore it back once you finish debugging.
procedure main() {
    local CompleteTheory = merge(T_fixed, T_student) 
    
//    explainunsat(CompleteTheory, S1)
    
    // Change the structure name to try other structures (check the included file "structures.idp" for available provided structures, and feel free to add additional structures)                                
    model = onemodel(CompleteTheory, S1)
    
    
    // Printing model 
    print(model)

    // Visualization
    initVisualization()
    visualizeElevator(model)
}

// File responsible for visualization  
include "visualize_elevator.idp"

// Structures for testing
// You can open this file and check the given structures 
include "structures.idp"
